{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vikra\\\\OneDrive\\\\Desktop\\\\AWS\\\\Kubertnetes\\\\ADM\\\\intelli-assignment\\\\frontend\\\\src\\\\components\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { loginSchema } from '../schemas/loginSchema';\nimport { Input } from './ui/Input';\nimport { Button } from './ui/Button';\nimport { useLogin } from '../hooks/useLogin';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginForm = () => {\n  _s();\n  var _errors$email, _errors$password;\n  const {\n    mutate,\n    isPending,\n    error\n  } = useLogin();\n  const [loginMessage, setLoginMessage] = useState(''); // Message state\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: zodResolver(loginSchema)\n  });\n  const onSubmit = data => {\n    setLoginMessage(''); // Reset the message before attempting to log in\n\n    mutate(data, {\n      onSuccess: () => {\n        setLoginMessage('User logged in successfully!');\n      },\n      onError: error => {\n        setLoginMessage('Email or password is incorrect.');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"formSection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome back!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"UID\",\n      registration: register('email'),\n      error: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n      type: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"Password\",\n      registration: register('password'),\n      error: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n      type: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), loginMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loginMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 26\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: isPending,\n      children: isPending ? 'Logging in...' : 'Login'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n};\n_s(LoginForm, \"KWVI9yIB8z3gdVXATJlt5VIxIog=\", false, function () {\n  return [useLogin, useForm];\n});\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useForm","zodResolver","loginSchema","Input","Button","useLogin","jsxDEV","_jsxDEV","LoginForm","_s","_errors$email","_errors$password","mutate","isPending","error","loginMessage","setLoginMessage","register","handleSubmit","formState","errors","resolver","onSubmit","data","onSuccess","onError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","registration","email","message","type","password","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Vikra/OneDrive/Desktop/AWS/Kubertnetes/ADM/intelli-assignment/frontend/src/components/LoginForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { loginSchema } from '../schemas/loginSchema';\r\nimport { z } from 'zod';\r\nimport { Input } from './ui/Input';\r\nimport { Button } from './ui/Button';\r\nimport { useLogin } from '../hooks/useLogin';\r\nimport '../App.css';\r\n\r\n\r\nexport const LoginForm = () => {\r\n  const { mutate, isPending, error } = useLogin();\r\n  const [loginMessage, setLoginMessage] = useState<string>(''); // Message state\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<z.infer<typeof loginSchema>>({\r\n    resolver: zodResolver(loginSchema),\r\n  });\r\n\r\n  const onSubmit = (data: z.infer<typeof loginSchema>) => {\r\n    setLoginMessage(''); // Reset the message before attempting to log in\r\n\r\n    mutate(data, {\r\n      onSuccess: () => {\r\n        setLoginMessage('User logged in successfully!');\r\n      },\r\n      onError: (error: any) => {\r\n        setLoginMessage('Email or password is incorrect.');\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit(onSubmit)} className='formSection'>\r\n        <h2 >Welcome back!</h2>\r\n        <Input placeholder=\"UID\" registration={register('email')} error={errors.email?.message} type=\"email\" />\r\n        <Input placeholder=\"Password\"  registration={register('password')} error={errors.password?.message} type=\"password\" />\r\n        {loginMessage && <p>{loginMessage}</p>}\r\n        {error && <p >{error.message}</p>}\r\n        <Button type=\"submit\" disabled={isPending}>{isPending ? 'Logging in...' : 'Login'}</Button>\r\n      </form>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}